import random
import math


class Forces:
    # constructor
    def __init__(self):
        return

    # acceleration = change in velocity / elapsed time
    def acceleration(self, v1, v2, t1, t2):
        return (v2 - v1) / (t2 - t1)

    # force = mass of body multiplied by acceleration
    def force(self, m, a):
        return m * a

    # gravitational force between two bodies = product of their masses and gravitational constant divided by the distance between their center of mass
    def gravitationalForceTwoMasses(self, m1, m2, r, G=6.67*10**(-11)):
        return (G * m1 * m2) / r**2

    def gravitationalForceOneMass(self, m, g):
        return m * g

    # frictional force  - depends on the force at which the ground pushes on an object
    def frictionalForceSliding(self, normalForce):
        # reference engineeringtoolbox.com
        mu = round(random.uniform(0.001, 1.5), 2)
        normalForce = self.gravitationalForceOneMass(m, g)
        return mu * int(normalForce)

    def frictionalForceRolling(self, normalForce):
        # reference engineeringtoolbox.com
        c = round(random.uniform(0.001, 1.5), 2)
        normalForce = self.gravitationalForceOneMass(m, g)
        return c * int(normalForce)

    # motion in inclined plane
    def inclinedPlaneMotion(self, angle):
        # convert angle from degrees to radians
        # gravitationalPull = math.cos(math.radians(angle))
        forwardMotionForce = math.sin(math.radians(angle))
        normalForce = self.gravitationalForceOneMass(m, g)
        return int(normalForce) * forwardMotionForce

    # critical angle - to find angle at which forward motion force > fricational force in an inclined plane
    def criticalAngle(self, resistanceCoefficient):
        # convert angle from radians to degrees
        return math.degrees(math.atan(resistanceCoefficient))

    # terminal velocity
    def terminalVelocity(self, dragCoefficient, density, crossSectionalArea):
        velocity = math.sqrt((2 * self.gravitationalForceOneMass(m, g)) /
                             (dragCoefficient * density * crossSectionalArea))
        return velocity

    # fluid resistance/drag
    def fluidResistance(self, dragCoefficient, density, crossSectionalArea, speed):
        drag = 0.5 * dragCoefficient * density * crossSectionalArea * speed**2
        return drag


# --- Test Cases --- #
if __name__ == "__main__":

    f = Forces()

    choice = input(print(f"{'Choose from the following functions to execute: ':<15}",
                         f"\n{'1-acceleration':<15}",
                         f"\n{'2-force':<15}",
                         f"\n{'3-gravitational force between 2 objects':<15}",
                         f"\n{'4-critical angle of inclined path':<15}",
                         f"\n{'5-fluid resistance':<15}",
                         f"\n{'6-gravitational force on 1 object':<15}",
                         f"\n{'7-frictional sliding force':<15}",
                         f"\n{'8-frictional rolling force':<15}",
                         f"\n{'9-inclined plane motion':<15}",
                         f"\n{'10-terminal velocity':<15}"))

    if choice == "1":
        v1 = int(input("Enter Initial Velcoity (m/s) = "))
        v2 = int(input("Enter Final Velocity (m/s) = "))
        t1 = int(input("Enter Initial Time (s) = "))
        t2 = int(input("Enter Final Time (s) = "))
        print("Acceleration is {:.2f} (m/s^2), or {:.2f} (g).".format(
            f.acceleration(v1, v2, t1, t2), f.acceleration(v1, v2, t1, t2) / 10))
    elif choice == "2":
        m = int(input("Enter a Mass (kg) = "))
        v1 = int(input("Enter Initial Velcoity (m/s) = "))
        v2 = int(input("Enter Final Velocity (m/s) = "))
        t1 = int(input("Enter Initial Time (s) = "))
        t2 = int(input("Enter Final Time (s) = "))
        a = f.acceleration(v1, v2, t1, t2)
        print("Force of object is {:.2f} (N).".format(
            f.force(m, a)))
    elif choice == "3":
        m1 = int(input("Enter Mass for first body (kg) = "))
        m2 = int(input("Enter Mass for second body (kg) = "))
        r = int(input("Enter distance between center of mass of bodies (m) = "))
        print("Graviational Force on both objects is {:.2f} (N).".format(
            f.gravitationalForceTwoMasses(m1, m2, r)))
    elif choice == "4":
        coefficient = float(
            input("Enter a sliding or rolling resistance coefficient = "))
        print("Critical Angle based on given resistance coefficient is {:.2f} (degrees).".format(
            f.criticalAngle(coefficient)))
    elif choice == "5":
        coefficient = float(
            input("Enter a sliding or rolling resistance coefficient = "))
        density = float(input("Enter a density (kg/m^3) = "))
        area = float(input("Enter a cross-sectional area (m^2) = "))
        speed = float(input("Enter a velocity (m/s) = "))
        print("Fluid Resistance is {:.2f} (N). ".format(
            f.fluidResistance(coefficient, density, area, speed)))
    elif choice == "6" or "7" or "8" or "9" or "10":
        m = int(input("What is the mass of the object? (kg) "))
        gChoice = input(
            "Choose a gravity constant from the following: earth, sun, moon, mars, jupiter - ")

        if gChoice == "earth":
            g = 9.807
        elif gChoice == "moon":
            g = 1.62
        elif gChoice == "mars":
            g = 3.711
        elif gChoice == "jupiter":
            g = 24.79
        elif gChoice == "sun":
            g = 279

        if choice == "6":
            print("Graviational Pull on the surface of the {} is {:.2f} (N).".format(gChoice,
                                                                                     f.gravitationalForceOneMass(m, g)))
        elif choice == "7":
            print("Frictional Sliding Force on the object is {:.2f} (N).".format(
                f.frictionalForceSliding(normalForce=f.gravitationalForceOneMass(m, g))))
        elif choice == "8":
            print("Frictional Rolling Force on the object is {:.2f} (N).".format(
                f.frictionalForceRolling(normalForce=f.gravitationalForceOneMass(m, g))))
        elif choice == "9":
            inclineAngle = int(input("Enter an incline angle (degrees) = "))
            print("Inclined Plane Forward Motion Force on the object is {:.2f} (N).".format(
                f.inclinedPlaneMotion(inclineAngle)))
        elif choice == "10":
            coefficient = float(input("Enter a drag coefficient = "))
            density = float(input("Enter a density value (kg/m^3) = "))
            area = float(input("Enter a cross-sectional area (m^2) = "))
            print("Terminal Velocity of object of mass {:.2f} (kg) is {:.2f} (m/s).".format(
                f.gravitationalForceOneMass(m, g), f.terminalVelocity(coefficient, density, area)))
