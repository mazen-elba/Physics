# When a body travels in a straight line (a = delta(v)/delta(t))
# ... acceleration is rate of change in speed
# ... acceleration is change in velocity divided by elapsed time
# When a body travels along a curved path (a = v^2/r)
# ... acceleration depends on velocity and radius of curvature

# --- Units of Acceleration: 1 m/s^2 = g/10 -- #


class Acceleration:
    # constructor
    def __init__(self):
        return

    # acceleration in a straight path
    def accelerationStraightPath(self, initialVelocity, finalVelocity, initialTime, finalTime):
        changeInSpeed = finalVelocity - initialVelocity
        elapsedTime = finalTime - initialTime

        acceleration = changeInSpeed / elapsedTime

        return str(acceleration) + " meters/seconds^2" + " or " + str(acceleration/10) + " grams."

    # acceleration in a curved path
    def accelerationCurvedPath(self, velocity, curvatureRadius):

        acceleration = velocity**2 / curvatureRadius

        return str(acceleration) + " meters/seconds^2" + " or " + str(acceleration/10) + " grams."


# --- Test Cases Driver Program --- #
if __name__ == "__main__":

    acc = Acceleration()

    initialVelocity = int(input(
        "Enter a starting velocity (m/s^2): "))
    finalVelocity = int(
        input("Enter a final velocity (m/s^2): "))
    initialTime = int(input("Enter a starting time (s): "))
    finalTime = int(input("Enter a final time (s): "))
    velocity = int(input("Enter a velocity (m/s^2): "))
    curvatureRadius = int(
        input("Enter a curvature radius (m): "))

    print(acc.accelerationStraightPath(initialVelocity,
                                       finalVelocity, initialTime, finalTime))
    print(acc.accelerationCurvedPath(velocity, curvatureRadius))
